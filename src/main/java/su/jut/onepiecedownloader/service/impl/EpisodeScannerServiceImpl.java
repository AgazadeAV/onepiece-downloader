package su.jut.onepiecedownloader.service.impl;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.boot.context.event.ApplicationReadyEvent;
import org.springframework.context.event.EventListener;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import su.jut.onepiecedownloader.client.EpisodePageClient;
import su.jut.onepiecedownloader.dto.EpisodeLinkDto;
import su.jut.onepiecedownloader.dto.ScanResultDto;
import su.jut.onepiecedownloader.mapper.EpisodeLinkMapper;
import su.jut.onepiecedownloader.model.EpisodeLink;
import su.jut.onepiecedownloader.repository.EpisodeLinkRepository;
import su.jut.onepiecedownloader.service.EpisodeScannerService;
import su.jut.onepiecedownloader.util.AppConstants;

@Slf4j
@Service
@RequiredArgsConstructor
public class EpisodeScannerServiceImpl implements EpisodeScannerService {

    private final EpisodeLinkRepository episodeLinkRepository;
    private final EpisodeLinkMapper episodeLinkMapper;
    private final EpisodePageClient episodePageClient;

    private static final int FIRST_EPISODE = 1;

    @EventListener(ApplicationReadyEvent.class)
    @Transactional
    public void onApplicationReady() {
        checkForNewEpisodeAndSave();
    }

    @Override
    @Transactional
    public ScanResultDto scanAndSaveMissingEpisodes() {
        log.info("üì° –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–ø–∏–∑–æ–¥–æ–≤...");

        int episode = FIRST_EPISODE;
        int saved = 0;
        int failed = 0;

        while (true) {
            if (episodeLinkRepository.existsByEpisodeNumber(episode)) {
                episode++;
                continue;
            }

            if (!episodePageClient.pageExists(episode)) {
                log.info("üîö –≠–ø–∏–∑–æ–¥ {} –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–∞–π—Ç–µ ‚Äî –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–µ—Ä–≤–∏—á–Ω–æ–≥–æ –ø—Ä–æ—Ö–æ–¥–∞", episode);
                break;
            }

            if (saveEpisode(episode)) saved++;
            else failed++;

            episode++;
        }

        int lastOnSite = findLastEpisodeOnSite(episode);

        log.info("üîç –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö —ç–ø–∏–∑–æ–¥–æ–≤ (1-{})", lastOnSite);

        for (int i = FIRST_EPISODE; i <= lastOnSite; i++) {
            if (!episodeLinkRepository.existsByEpisodeNumber(i)) {
                log.warn("‚ö†Ô∏è –≠–ø–∏–∑–æ–¥ {} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ ‚Äî –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞", i);
                if (episodePageClient.pageExists(i)) {
                    if (saveEpisode(i)) saved++;
                    else failed++;
                } else {
                    log.warn("üö´ –≠–ø–∏–∑–æ–¥ {} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞ —Å–∞–π—Ç–µ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º", i);
                }
            }
        }

        log.info("‚úÖ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ü–æ—Å–ª–µ–¥–Ω–∏–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π —ç–ø–∏–∑–æ–¥ –Ω–∞ —Å–∞–π—Ç–µ: {}", lastOnSite);

        return ScanResultDto.builder()
                .message("–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
                .saved(saved)
                .failed(failed)
                .lastEpisodeOnSite(lastOnSite)
                .build();
    }

    @Override
    public int getTotalEpisodes() {
        return (int) episodeLinkRepository.count();
    }

    @Override
    @Transactional
    public ScanResultDto checkForNewEpisodeAndSave() {
        return episodeLinkRepository.findTopByOrderByEpisodeNumberDesc().map(last -> {
            int next = last.getEpisodeNumber() + 1;
            if (episodePageClient.pageExists(next)) {
                boolean success = saveEpisode(next);
                return ScanResultDto.builder()
                        .message(success ? "–ù–æ–≤—ã–π —ç–ø–∏–∑–æ–¥ –Ω–∞–π–¥–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω" : "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ —ç–ø–∏–∑–æ–¥–∞")
                        .saved(success ? 1 : 0)
                        .failed(success ? 0 : 1)
                        .lastEpisodeOnSite(next - 1)
                        .build();
            } else {
                return ScanResultDto.builder()
                        .message("–ù–æ–≤—ã–π —ç–ø–∏–∑–æ–¥ –ø–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                        .saved(0)
                        .failed(0)
                        .lastEpisodeOnSite(next)
                        .build();
            }
        }).orElseGet(() -> {
            log.warn("üìõ –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ —ç–ø–∏–∑–æ–¥–∞ ‚Äî –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ");
            return scanAndSaveMissingEpisodes();
        });
    }

    @Scheduled(cron = "0 59 23 * * *")
    @Transactional
    public void checkForNewEpisodeAndSaveScheduled() {
        checkForNewEpisodeAndSave();
    }

    private boolean saveEpisode(int episode) {
        String url = String.format(AppConstants.BASE_EPISODE_URL, episode);

        try {
            var doc = episodePageClient.fetchEpisodePage(episode);
            if (doc == null) {
                log.warn("üìÑ –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å HTML-–¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è —ç–ø–∏–∑–æ–¥–∞ {}", episode);
                return false;
            }

            String title = episodePageClient.extractTitle(doc);
            String qualities = episodePageClient.extractQualities(doc);

            if (title == null || title.isBlank()) {
                log.warn("‚ö†Ô∏è –ü—É—Å—Ç–æ–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è —ç–ø–∏–∑–æ–¥–∞ {} ‚Äî —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", episode);
                return false;
            }

            if (qualities == null) {
                log.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∫–∞—á–µ—Å—Ç–≤–æ –¥–ª—è —ç–ø–∏–∑–æ–¥–∞ {} ‚Äî —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", episode);
                return false;
            }

            EpisodeLinkDto dto = EpisodeLinkDto.builder()
                    .episodeNumber(episode)
                    .episodeTitle(title)
                    .episodeUrl(url)
                    .availableQualities(qualities)
                    .build();

            EpisodeLink entity = episodeLinkMapper.toEntity(dto);
            episodeLinkRepository.save(entity);
            log.info("üíæ –≠–ø–∏–∑–æ–¥ {} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω", episode);
            return true;

        } catch (Exception e) {
            log.warn("‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —ç–ø–∏–∑–æ–¥–∞ {}: {}", episode, e.getMessage());
            return false;
        }
    }

    private int findLastEpisodeOnSite(int episodeNumber) {
        while (episodePageClient.pageExists(episodeNumber)) {
            episodeNumber++;
        }
        return episodeNumber - 1;
    }
}
